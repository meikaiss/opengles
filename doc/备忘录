1、FBO对坐标系、相机矩阵的影响？是否仅仅是只需Y轴倒置


2、如何深入理解透视投影矩阵？
https://cloud.tencent.com/developer/article/1472455

定义：设置透视投影矩阵，用于定义物理世界中的一个锥形视景体，描述将物理世界中哪一部分范围的景色投影到二维屏幕中。
理解：透视投影中，视点理解为眼睛，近平面理解为屏幕，远平面理解为观察的最远平面，近平面与远平面之间的物体可被投影到近平面（即屏幕）上。视点与近平面的射线在近平面与远平面的部分是四棱锥，这部分四棱锥就是可以显示出的物理世界的物体。视点与近平面越近，则看到的范围越广，则同一个物体在视角范围内的占比就越小，从而投影到近平面上就越小。
奥义：与通常所说的近大远小的结论相反，根本原因在于参照系不同。透视投影矩阵中所说的“近”是指视点与近平面的距离，近平面指的是计算机屏幕。
避坑：在理解透视投影时，暂时不考虑相机矩阵，完全把相机当作固定位置。相机矩阵是在透视投影矩阵的基础上再次包装而得到的算法。
代码：创建方法有两种：frustumM 和 perspectiveM


3、UYVY格式的图像数据源如何获取？如何用opengl显示到屏幕？


4、Camera2流式操作的各个api的相同点、不同点?
https://blog.csdn.net/qq_42194101/category_11338722.html
Android Camera2 API详解


5、Camea2无预览界面时的后台录制？即只存在Application，却不存在Activity时，如何录制？



6、尝试绘制地球仪，然后将世界图片换成VR图片


7、对opengl的一些特有的理解：
  a、opengl只是借助数学中的矩阵运算的几何意义，将现实中的3D景物投射到2D计算机屏幕上，使人眼在2D屏幕上看到的图像具有物理世界的3D特征，从而让人脑接收3D信息。
  b、opengl利用数学矩阵模型所建立的三维世界，并不完全等同于物理现实3D世界。无论是三维坐标，还是光照模型，opengl只是尽量借助矩阵计算出尽可能相似于的现实物理世界的特征图像数据，
     再把图像显示到二维屏幕上。
  c、计算机屏幕毫无疑问是一个二维屏幕，假如opengl能完全还原3D世界，那么你眼前的这块屏幕就能做到完全透明，像是没有这块屏幕一样，显示器只是一个外框，透过外框看到屏幕之后的物理世界。
     然而这显然是不可能做到的，人眼一看就能自然分辨出这是屏幕所创建的三维世界，而不是真实物理世界的三维世界，这是人类生物的本能。
     因此可以得出结论：opengl的三维模型只是尽量提取现实世界的三维成像特征，利用大脑天生对现实物理世界的图像采集规则，在2D屏幕上欺骗人脑。
                   而完全模拟现实物理的三维模型是不可能做的，因为现实物理世界的复杂度，大到足以让计算机的CPU的无法处理。


8、opengl中的向量都认为是竖向量。
     A和B可以是向量或矩阵。
     A左乘B，那么A在左，B在右；
     A右乘B，那么A在右，B在左；

     左乘和右乘只是确认谁在左边，谁在右边，但要求左边的列数一定要等于右边的行数


9、opengl非常详细全面的资料
    https://learnopengl-cn.github.io/
   opengl中的向量与矩阵的规则
    https://www.jianshu.com/p/6a2d018a45dd
