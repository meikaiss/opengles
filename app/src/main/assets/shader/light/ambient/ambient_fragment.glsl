precision mediump float;
varying vec4 vColor;
varying vec3 ambient;

/**
环境光的基础原理：

在现实世界中光照使得人眼能够看见物体的颜色，物体颜色的不同本质上是因为其表面对光的吸收和反射的能力不同。
光的三原色是红绿蓝（RGB），因此我们一般用一个三维向量来描述物体的颜色。
假设一个物体 A 的颜色向量为 A{R1,G1,B1}， R1、G1、B1的值域范围[0.0, 1.0]，这表示的意义是：

物体 A 对红光的反射比率为 R1 ，即光照在物体 A 上会有 1.0-R1 比率的红光被吸收，剩余R1比率的红光被反射到人眼，绿蓝光同理
因此，假设只有一束光 L{R0，G0，B0} 照射在物体 A 上，然后被我们看见，我们看到的物体 A 的颜色就是：

人眼感受到的颜色 = L{R0，G0，B0} * A{R1,G1,B1} = {R0*R1，G0*G1，B0*B1}

这里的 *星花符号 表示的是各个分量相乘 。

现实世界中的太阳光的颜色向量为 {1.0，1.0，1.0} ，因此我们看到的物体的颜色就是它本身的颜色，但是实际上 RGB 表示法描述的是物体对光的反射率，当光的 RGB 组成不同时，我们看到的颜色也不一样。
*/
void main() {
    /**
        矩阵的乘法类型：
        一、矩阵的点乘
          a、两个矩阵的行数和列数必须相等才能进行点乘
          b、两个矩阵相乘，结果为两个矩阵对应元素相乘组成的矩阵，即
        二、矩阵的叉乘
          a、两个矩阵叉乘必须满足第一个矩阵的列数与第二个矩阵的行数相等


        *星花符号应用于不同对象时，有不同含义
          1、矩阵 * 列向量：表示按矩阵叉乘
          2、列向量 * 列向量：表示对应元素相乘，得到的新向量。要求向量的行列数相同
    */

    /**
        *表示的是各个分量相乘，就能得到环境光与物体材质颜色混合的效果
        点乘用内置函数dot，叉乘用内置函数cross，分量相乘用*
        冯氏光照模型的原理理解参考 https://zhuanlan.zhihu.com/p/427477685
    */
    vec3 finalColor = ambient * vec3(vColor);
    gl_FragColor = min(vec4(finalColor, vColor.a), vec4(1.0));
}